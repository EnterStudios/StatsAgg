### Connection Variables
#
# cp_max_connections : The maximum number of connections to the database that the connection-pool is allowed to make.
#                      Default : 25
#
# cp_acquire_retry_attempts : After attempting to acquire a connection and failing, try to connect this many times before giving up.
#                             Default : 3
#
# cp_acquire_retry_delay : Sets the number of milliseconds to wait before attempting to obtain a connection after a failure.
#                          Default : 250
#
# cp_connection_timeout : Sets the maximum time (in milliseconds) to wait before a call 'get a connection' is timed out. 
#                         Setting this to '0' means 'wait forever' (disables the time-out)
#                         Default : 5000
#
# cp_enable_statistics : Specifies whether metrics about connection pool performance are gathered. Enabling this gives greater insight into
#                        the performance of the connection pool, but at the cost of performance.
#                        Default : false
#
# cp_default_auto_commit : Specifies whether the connection pool defaults to having auto-commit enabled or disabled. True=enabled, false=disabled.
#                          Default : false
#
# connection_validity_check_timeout : Database connections are often tested to see if they are 'healthy' (aka 'valid'). When a validity test is issued against a connection,  
#                                     the validity test can fail if too much time has passed. This variable controls how long the application will wait (in seconds) 
#                                     before declaring that a connection is invalid. Setting this variable to '0' means that the validity test will wait forever (no time-out).
#                                     Default : 5
cp_max_connections = 25
cp_acquire_retry_attempts = 3
cp_acquire_retry_delay = 250
cp_connection_timeout = 5000
cp_enable_statistics = false
cp_default_auto_commit = false
connection_validity_check_timeout = 5



### JDBC Configuration 
#
# db_type : The type of database being used. Choices include Apache Derby Embedded, Apache Derby Network, MySQL, or PostgreSQL.
#           Valid options: derby_embedded, derby_network, mysql, postgres
#           Example: derby_embedded	 
#
# db_hostname : Use if using Apache Derby Network, MySQL, or PostgreSQL. Should be a valid hostname or IP-address.
#               Do not set if using Apache Derby Embedded.
#               Example: 192.168.0.100
#
# db_port : Use if using Apache Derby Network, MySQL, or PostgreSQL. Do not set if using Apache Derby Embedded. Should be a valid port #.
#           Tips-- Apache Derby Network usually runs on port 1527
#                  MySQL usually runs on port 3306
#                  PostgreSQL usually runs on port 5432
#           Example: 3306
#
# db_localpath : Use if using Apache Derby Embedded. This should be a path to a folder on your computer where Derby will store its database data.
#                Note: When using Windows, '\' characters must be escaped with another '\' character.
#                Example (Windows): C:\\Data
#                Example (Linux): /opt/Data
#
# db_name : The name of the 'database' (aka, the schema).
#           Example: mySchema
#
# db_username : The username that you wish to connect to the database with.
#               Example: myUser
#
# db_password : The password that you wish to connect to the database with (if any).
#               Example: myPW
#
# db_attributes : Specify any JDBC connection attributes that you wish to use to connect to your databases. 
#                 The normal format is: attribute1=value&attribute2=value&attribute2=value
#                 Example (MySQL specific): autoReconnect=true&failOverReadOnly=false&maxReconnects=1
#
# db_custom_jdbc : Most of the other JDBC variables exist solely to simplify the process of building the JDBC connection string.
#                  If you wish to bypass all of the above listed JDBC variables, you can specify a custom JDBC connection string in this variable.
#                  The other JDBC variables will be ignored (ex- db_name, db_localpath, etc). 
#                  Note - Application code often times uses db_type as a hint for query building. When using db_custom_jdbc, you should also specify a valid db_type.
#                  Example: jdbc:derby://myhost:1527/memory:myDB;create=true
db_type = derby_embedded
db_hostname =
db_port =
db_localpath = C:\\Data
db_name = mySchema
db_username = myUser
db_password = myPW
db_attributes = create=true;upgrade=true;



### Apache Derby Configuration
# These are derby configuration values that override the default derby system-wide configuration (the default derby.properties values).
# If using another database (MySQL, PostgreSQL, etc), setting these variables will have no effect.
# View the 'Derby properties' page of Apache Derby Reference Manual for more details 
# http://db.apache.org/derby/docs/10.11/ref/crefproper22250.html
#
# Note : Limited variable substitution is allowed. 
#        Use ${db_localpath} to get the value of db_localpath (specified in the JDBC connection section)
#        Use ${db_name} to get the value of db_name (specified in the JDBC connection section)
#        Use ${file.separator} to get the operating-system specific file path separator
derby.system.home = ${db_localpath}
derby.infolog.append = true
derby.stream.error.file = ${db_localpath}${file.separator}${db_name}${file.separator}log${file.separator}db_log.txt      
derby.storage.pageSize = 16384
derby.storage.pageCacheSize = 15000