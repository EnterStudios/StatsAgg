StatsAgg 1.4
 * Document metric prefixes behavior
   * Periods as delimiters in all output modules (seems to be industry standard)
 * Document quirks in each output db
   * InfluxDB -> Graphite 
 * Document - StatsAgg is not a proxy
 * Document new UI options (time unit, blacklist regex, positive alert notification groups, etc)
 * Document HA configuration
 * 'Clear all' button for clearing/forgetting triggered availability alerts 
 * Optional "don't output InfluxDB database name" for InfluxDB format -> (any other format)
 * Test cross-format metric output (Graphite->OpenTSDB,InfluxDB), (OpenTSDB->InfluxDB,Graphite), (InfluxDB->OpenTSDB,Graphite)
 * Advanced options
   * Make optional output HTTP error response bodies to log file

StatsAgg 1.5
 * InfluxDB 0.9+ support
 * Add feature -- 'Metric suspensions'. Like 'Alert suspensions', but for metrics. This may silently hook into the 'metric blacklist regex' mechanism of metric groups.
 * Alter buttons on 'details' pages
 * Reduce JS code for typeahead
 * "debug don't output" for output modules. Run output module logic without actually connecting to external dbs.
 * use time unit selectors for duration fields (alerts, alert suspensions)
 * Alert status output 'is suspended' tags for OpenTSDB & InfluxDB
 * Support 'no timestamp' on Graphite metrics
 * Advanced options
   * (optional) Incoming metric rate limits
    * Cleanup metrics after... (currently hardcoded to 24hrs)
 
Short/Medium term
 * Support for KariosDB?
 * metricKeysLastSeenTimestamp & metricKeysLastSeenTimestamp_UpdateOnResend  -- one Map, defined as Map<MetricKey,Long[ts1,ts2]> ???
 * Manual injection of metrics via a new servlet w/ a WebUI component
 * Multi-thread StatsD aggregation routine & Graphite aggregation routine
 * Apply column-sort to WebUI tables via parameter in URI
 * Control what StatsD 'timer' fields are outputted (so people can ignore the more useless ones)
 * Debug mode for "details" pages (include additional details)
 * Alternative output API for notification groups
 * Let the user control the number of metrics to return on 'Regex Tester' and 'Metric Group - Metric Key Associations' 
 * Advanced options
   * (optional) Limit metric-key length displayed in StatsAgg WebUI
   * (optional) Limit metric group association count
   * (optional) Limit max # datapoints for in memory for a single metric-key
   
Long-term / Wishlist / Brainstorming
 * StatsD forwarder
 * Support more forms of notification (not just email)
 * View application config in WebUI
   * Need to remove anything sensitive (smtp credentials, etc)
 * History/events log w/ UI component
 * Alert escalation notification-group in Alerts
 * APIs to create alerts / metric-groups / etc
 * "Event Listener" API -- for anything that wants to use StatsAgg to send an alert, but also wants to tie into 'Alert Suspensions'
 * Mobile versions of essential WebUI pages
   * Make existing pages more mobile friendly?
 * Flot graphs on 'Recent Metric Values' page
   * Covered by Graphite/Grafana for visualization
 * OpenTSDB SSL for HTTP interface
   * Migrated by using other software as a middle-man. Ex-- HAProxy, AWS ELB.
 * Support Graphite Pickle format
   * Barely used by anything. Python specific.
 * Migrate connection pool to HikariCP
 * Server-side WebUI tables?
   * Will likely lose functionality
 * Calculator (add/multiply/etc) all the most recent values of a metric group)?
 * Alert by individual metric?
 * OpenTSDB -- send back a list of 'metrics with errors' on HTTP requests with the 'details' parameter
   * Exact formatting of OpenTSDB output would be difficult to replicate.
   * Little pay-off for the effort involved.
 * Convert to a regular Java app & use embedded Tomcat for the WebUI
   * Simplifies installation, but removes all the nice stuff we get from Tomcat.
   * Would need to be a separate git repo