StatsAgg 1.3
 * Update screenshots
 * Final QA checks & documentation updates
 
Short/Medium term
 * Optimize Graphite metric formatter
 * Native InfluxDB support
 * Support output via OpenTSDB HTTP/JSON
 * Manual injection of metrics via a new servlet w/ a WebUI component
 * Multi-thread StatsD aggregation routine
 * Let the user control the number of metrics to return on 'Regex Tester' and 'Metric Group - Metric Key Associations' 
 * Apply column-sort to WebUI tables via parameter in URI
 * Control what StatsD 'timer' fields are outputted (so people can ignore the more useless ones)
 * Debug mode for "details" pages (include additional details)
 * Advanced options
   * Maximum concurrently running output-threads
   * Incoming metric rate limits
   * Output-thread timeout
   * Cleanup metrics after... (currently hardcoded to 24hrs)
   
Long-term / Wishlist / Brainstorming
 * StatsD forwarder
 * View application config in WebUI
   * Need to remove anything sensitive (smtp credentials, etc)
 * History/events log w/ UI component
 * Alert escalation notification-group in Alerts
 * APIs to create alerts / metric-groups / etc
 * "Event Listener" API -- for anything that wants to use StatsAgg to send an alert, but also wants to tie into 'Alert Suspensions'
 * Mobile versions of essential WebUI pages
   * Make existing pages more mobile friendly?
 * Flot graphs on 'Recent Metric Values' page
   * Covered by Graphite/Grafana for visualization
 * OpenTSDB SSL for HTTP interface
   * Migrated by using other software as a middle-man. Ex-- HAProxy, AWS ELB.
 * Support Graphite Pickle format
   * Barely used by anything. Python specific.
 * Migrate connection pool to HikariCP
 * Server-side WebUI tables?
   * Will likely lose functionality
 * Calculator (add/multiply/etc) all the most recent values of a metric group)?
 * Alert by individual metric?
 * OpenTSDB -- send back a list of 'metrics with errors' on HTTP requests with the 'details' parameter
   * Exact formatting of OpenTSDB output would be difficult to replicate.
   * Little pay-off for the effort involved.
 * Convert to a regular Java app & use embedded Tomcat for the WebUI
   * Simplifies installation, but removes all the nice stuff we get from Tomcat.
   * Would need to be a separate git repo
 * When altering alerts & 'stuff is in an alerted status', don't null the alert status if the alert status is the same.
   * May require substantial refactoring
